load smt.maude .
fmod WHILE-LANG-INSTS-MOD is

    pr STRING .
    pr REAL .

    sort Inst .
    sorts Skip Assignment .
    subsort Skip Assignment < Inst .

    op skip ; : -> Skip [ctor prec 20] .
    op _ := _ ; : String Real -> Assignment [ctor prec 20] .
    ***op _ := _ ; : String String -> Assignment [ctor prec 20] .

endfm

view Inst from TRIV to WHILE-LANG-INSTS-MOD is
  sort Elt to Inst .
endv

view Real from TRIV to REAL is
  sort Elt to Real .
endv

fmod WHILE-LANG-BLOCK-MOD is

    pr WHILE-LANG-INSTS-MOD .
    pr LIST{Inst} .

    sorts IfElse While .
    subsort IfElse While < Inst .

    op if _ then {_} else {_} : Boolean List{Inst} List{Inst} -> IfElse [ctor prec 20] .
    op if _ then {_} : Boolean List{Inst} -> IfElse [ctor prec 20] .

    op while _ do {_} : Boolean List{Inst} -> While [ctor prec 20] .

    var B : Boolean .
    var IL1 : List{Inst} .

    eq if B then {IL1} = if B then {IL1} else {nil} .

endfm

mod WHILE-MAUDE is

    pr WHILE-LANG-BLOCK-MOD .

    pr MAP{String, Real} .

    sort State .
    
    op # _ | _ # : List{Inst} Map{String, Real} -> State [ctor] . 

    vars Var Var1 Var2 : String .
    var B : Boolean .
    var RealVal : Real .
    vars IL IL1 IL2 : List{Inst} .
    var STR : Map{String, Real} .

    rl [skip] : 
        # skip ; IL | STR #
        =>
        # IL | STR # .

    rl [assign] : 
        # Var := RealVal ; IL | STR #
        =>
        # IL | insert(Var, RealVal, STR) # .

    rl [if..then..else] : 
        # if B then { IL1 } else { IL2 } IL | STR #
        =>
        if B == true then 
          # IL1 IL | STR #
        else
          # IL2 IL | STR #
        fi .
    
    rl [while..do] : 
        # while B do { IL1 } IL | STR #
        =>
        if B == true then 
          # IL | STR #
        else
          # IL1 while B do { IL1 } IL | STR #
        fi .
    
    
    ***
    ***op subst : String Real State -> State [ctor] .
    ***eq subst(Var, RealVal, # Var1 := Var ; IL | STR #) = # Var1 := RealVal ; IL | STR # .

endm