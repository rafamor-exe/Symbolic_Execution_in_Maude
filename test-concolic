search in WHILE-MAUDE : start(var('var2) := val(toReal(1)) ; while (var('var2) < var('var1)) do {var('var2) := var('var2) + toReal(1) ; } where ((p:Real < toReal(5)) and (p:Real > toReal(0))), var('var1) := val(p:Real) ;) =>* ConcS:ConcolicState .

search in WHILE-MAUDE : start(var('n) := val(toReal(5)) ; var('res) := val(toReal(1)) ; while (var('n) >= toReal(1)) do {var('res) := var('res) * var('n) ; var('n) := var('n) - toReal(1) ; } where q:Real <= toReal(0)) =>* ConcS:ConcolicState .


python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer < 1)"
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Real < (1/2).Real)"
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer <= 1 and q:Integer >= 0 and p:Integer < 10 and p:Real > 20/2)"
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer <= 1 and q:Integer >= 0 and p:Integer < 10 and s:Real > 20/2)"
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer > 1 + 1 + 1 and q:Integer <= 5)"
python3 while-semantics-concolic.py --program "get-SMTassignment(1/2 + q:Real > 1/2)"
python3 while-semantics-concolic.py --program "get-SMTassignment(1/2 + q:Real > 1/2 - p:Real and p:Real > 0/1)"

***UNSAT test
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer <= 1 and q:Integer >= 0 and p:Integer < 10 and p:Integer > 20)"
python3 while-semantics-concolic.py --program "get-SMTassignment(q:Integer >= 1 and q:Integer <= 0)"


python3 while-semantics-concolic.py --program "start(var('var2) := val(1/1) ; if (var('var1) < var('var2)) then { var('var3) := val(0/1) ; } where (p:Real < 5/1), var('var1) := val(p:Real) ;)"

python3 while-semantics-concolic.py --program "start(var('var2) := val(1/1) ; if (var('var1) < var('var2)) then { var('var3) := val(0/1) ; } where (p:Real < 5/1), var('var1) := val(p:Real) ;)" --pattern "ConcS:ConcolicState"


[< if var('var1) < var('var2) then{var('var3) := val(0/1) ;}else{nil} | var('var1) |-> val(0:Real), var('var2) |-> val(1/1) >][< var('var2) := val(1/1) ; if var('var1) < var('var2) then{var('var3) := val(0/1) ;}else{nil} | var('var1) |-> val(p:Real), var('var2) |-> val(1/1) >{p:Real < 5/1}<{nil}][1]

search [< if var('var1) < var('var2) then{var('var3) := val(0/1) ;}else{nil} | var('var1) |-> val(0:Real), var('var2) |-> val(1/1) >][< var('var2) := val(1/1) ; if var('var1) < var('var2) then{var('var3) := val(0/1) ;}else{nil} | var('var1) |-> val(p:Real), var('var2) |-> val(1/1) >{p:Real < 5/1}<{nil}][1] =>* ConcS:ConcolicState .

red $apply-SMTassignment((var('var1) |-> val(p:Real), var('var2) |-> val(1/1)), get-SMTassignment(p:Real < 5/1    and p:Real < 1/1)) .

*** [NOTE]: When keeping the solver as an attribute, it remains the same instance throughout the whole execution
    - Check whether that would be useful instead of creating a new instance each time
        - Maybe not, because we need to explore paths with different sets of constraints (complementary constraints, in fact)
python3 while-semantics-concolic.py --program "get-SMTassignment(p:Real < 5/1 and not p:Real < 1/1)" --op rew